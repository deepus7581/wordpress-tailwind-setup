#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const readline = require('readline');
const { execSync } = require('child_process');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

console.log('üé® WordPress Tailwind CSS Setup');
console.log('================================\n');

// Function to create directory if it doesn't exist
function createDir(dirPath) {
  if (!fs.existsSync(dirPath)) {
    fs.mkdirSync(dirPath, { recursive: true });
    console.log(`‚úÖ Created directory: ${dirPath}`);
    return true;
  } else {
    console.log(`‚ÑπÔ∏è  Directory already exists: ${dirPath}`);
    return false;
  }
}

// Function to check if directory exists
function dirExists(dirPath) {
  return fs.existsSync(dirPath) && fs.statSync(dirPath).isDirectory();
}

// Function to validate folder name
function validateFolderName(name) {
  if (!name || name.trim() === '') {
    return 'Folder name cannot be empty';
  }
  if (!/^[a-zA-Z0-9-_]+$/.test(name)) {
    return 'Folder name can only contain letters, numbers, hyphens, and underscores';
  }
  if (name.length > 50) {
    return 'Folder name is too long (max 50 characters)';
  }
  return null;
}

// Function to update package.json with actual folder names
function updatePackageJson(pluginFolder, themeFolder) {
  const packagePath = './package.json';
  let packageContent = fs.readFileSync(packagePath, 'utf8');
  
  // Replace placeholders with actual folder names
  packageContent = packageContent.replace(/PLUGIN_FOLDER_NAME/g, pluginFolder);
  packageContent = packageContent.replace(/CUSTOM_THEME_FOLDER_NAME/g, themeFolder);
  
  fs.writeFileSync(packagePath, packageContent);
  console.log('‚úÖ Updated package.json with your folder names');
}

// Function to create PostCSS config
function createPostCSSConfig() {
  const postcssConfig = `module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}`;
  
  fs.writeFileSync('./postcss.config.js', postcssConfig);
  console.log('‚úÖ Created postcss.config.js');
}

// Function to create .gitignore entries
function updateGitignore() {
  const gitignorePath = './.gitignore';
  const gitignoreEntries = [
    '',
    '# Tailwind CSS',
    'node_modules/',
    'wp-content/plugins/*/assets/css/main.css',
    'wp-content/themes/*/assets/css/main.css',
    '.DS_Store',
    '*.log'
  ];
  
  let gitignoreContent = '';
  if (fs.existsSync(gitignorePath)) {
    gitignoreContent = fs.readFileSync(gitignorePath, 'utf8');
  }
  
  const newEntries = gitignoreEntries.filter(entry => !gitignoreContent.includes(entry));
  if (newEntries.length > 0) {
    fs.appendFileSync(gitignorePath, newEntries.join('\n'));
    console.log('‚úÖ Updated .gitignore');
  }
}

// Function to install npm dependencies
function installDependencies() {
  console.log('\nüì¶ Installing dependencies...');
  try {
    execSync('npm install', { stdio: 'inherit' });
    console.log('‚úÖ Dependencies installed successfully');
    return true;
  } catch (error) {
    console.error('‚ùå Failed to install dependencies:', error.message);
    return false;
  }
}

// Function to create initial CSS files
function createInitialCSS(pluginFolder, themeFolder) {
  const initialCSS = `/* Tailwind CSS - Generated by WordPress Tailwind Setup */
/* This file will be automatically updated when you run the watch command */

@tailwind base;
@tailwind components;
@tailwind utilities;

/* Your custom styles can be added below */`;

  // Create plugin CSS
  const pluginCSSPath = `./wp-content/plugins/${pluginFolder}/assets/css/main.css`;
  fs.writeFileSync(pluginCSSPath, initialCSS);
  console.log(`‚úÖ Created initial CSS: ${pluginCSSPath}`);

  // Create theme CSS
  const themeCSSPath = `./wp-content/themes/${themeFolder}/assets/css/main.css`;
  fs.writeFileSync(themeCSSPath, initialCSS);
  console.log(`‚úÖ Created initial CSS: ${themeCSSPath}`);
}

// Function to create example files
function createExampleFiles(pluginFolder, themeFolder) {
  const pluginExists = fs.existsSync(`./wp-content/plugins/${pluginFolder}/${pluginFolder}.php`);
  const themeFunctionsExists = fs.existsSync(`./wp-content/themes/${themeFolder}/functions.php`);
  
  // Create example plugin file only if it doesn't exist
  if (!pluginExists) {
    const examplePlugin = `<?php
/**
 * Plugin Name: ${pluginFolder}
 * Description: A WordPress plugin with Tailwind CSS
 * Version: 1.0.0
 */

// Prevent direct access
if (!defined('ABSPATH')) {
    exit;
}

// Enqueue Tailwind CSS
function ${pluginFolder}_enqueue_styles() {
    wp_enqueue_style(
        '${pluginFolder}-tailwind',
        plugin_dir_url(__FILE__) . 'assets/css/main.css',
        array(),
        '1.0.0'
    );
}
add_action('wp_enqueue_scripts', '${pluginFolder}_enqueue_styles');

// Example admin page
function ${pluginFolder}_admin_menu() {
    add_options_page(
        '${pluginFolder} Settings',
        '${pluginFolder}',
        'manage_options',
        '${pluginFolder}-settings',
        '${pluginFolder}_admin_page'
    );
}
add_action('admin_menu', '${pluginFolder}_admin_menu');

function ${pluginFolder}_admin_page() {
    ?>
    <div class="wrap">
        <h1 class="wp-heading-inline">${pluginFolder} Settings</h1>
        <div class="wp-container">
            <div class="bg-white p-6 rounded-lg shadow-md">
                <h2 class="text-xl font-bold text-gray-900 mb-4">Welcome to ${pluginFolder}!</h2>
                <p class="text-gray-700 mb-4">This plugin is now set up with Tailwind CSS.</p>
                <button class="wp-button">Save Settings</button>
            </div>
        </div>
    </div>
    <?php
}`;

    fs.writeFileSync(`./wp-content/plugins/${pluginFolder}/${pluginFolder}.php`, examplePlugin);
    console.log(`‚úÖ Created example plugin file: ${pluginFolder}.php`);
  } else {
    console.log(`‚ÑπÔ∏è  Plugin file already exists: ${pluginFolder}.php`);
  }

  // Create example theme functions.php only if it doesn't exist
  if (!themeFunctionsExists) {
    const exampleThemeFunctions = `<?php
/**
 * ${themeFolder} Theme Functions
 * Tailwind CSS Integration
 */

// Prevent direct access
if (!defined('ABSPATH')) {
    exit;
}

// Enqueue Tailwind CSS
function ${themeFolder}_enqueue_styles() {
    wp_enqueue_style(
        '${themeFolder}-tailwind',
        get_template_directory_uri() . '/assets/css/main.css',
        array(),
        '1.0.0'
    );
}
add_action('wp_enqueue_scripts', '${themeFolder}_enqueue_styles');

// Add theme support
function ${themeFolder}_theme_support() {
    add_theme_support('post-thumbnails');
    add_theme_support('title-tag');
    add_theme_support('custom-logo');
}
add_action('after_setup_theme', '${themeFolder}_theme_support');

// Example custom function with Tailwind classes
function ${themeFolder}_custom_header() {
    ?>
    <header class="bg-white shadow-md">
        <div class="wp-container">
            <nav class="wp-nav">
                <a href="<?php echo home_url(); ?>" class="text-wp-blue hover:text-wp-blue-dark font-semibold">
                    <?php bloginfo('name'); ?>
                </a>
            </nav>
        </div>
    </header>
    <?php
}`;

    fs.writeFileSync(`./wp-content/themes/${themeFolder}/functions.php`, exampleThemeFunctions);
    console.log(`‚úÖ Created example theme functions.php`);
  } else {
    console.log(`‚ÑπÔ∏è  Theme functions.php already exists`);
  }
}

// Function to display PHP code snippets for existing files
function displayPHPSnippets(pluginFolder, themeFolder) {
  console.log('\nüìã PHP Code Snippets for Existing Files');
  console.log('==========================================\n');
  
  console.log('üîå Plugin CSS Enqueue Code:');
  console.log('Add this to your existing plugin file:\n');
  console.log('```php');
  console.log(`// Enqueue Tailwind CSS for ${pluginFolder}`);
  console.log(`function ${pluginFolder}_enqueue_styles() {`);
  console.log(`    wp_enqueue_style(`);
  console.log(`        '${pluginFolder}-tailwind',`);
  console.log(`        plugin_dir_url(__FILE__) . 'assets/css/main.css',`);
  console.log(`        array(),`);
  console.log(`        '1.0.0'`);
  console.log(`    );`);
  console.log(`}`);
  console.log(`add_action('wp_enqueue_scripts', '${pluginFolder}_enqueue_styles');`);
  console.log('```\n');
  
  console.log('üé® Theme CSS Enqueue Code:');
  console.log('Add this to your existing theme functions.php:\n');
  console.log('```php');
  console.log(`// Enqueue Tailwind CSS for ${themeFolder}`);
  console.log(`function ${themeFolder}_enqueue_styles() {`);
  console.log(`    wp_enqueue_style(`);
  console.log(`        '${themeFolder}-tailwind',`);
  console.log(`        get_template_directory_uri() . '/assets/css/main.css',`);
  console.log(`        array(),`);
  console.log(`        '1.0.0'`);
  console.log(`    );`);
  console.log(`}`);
  console.log(`add_action('wp_enqueue_scripts', '${themeFolder}_enqueue_styles');`);
  console.log('```\n');
  
  console.log('üéØ Admin CSS Enqueue Code (for plugin admin pages):');
  console.log('Add this to your plugin for admin pages:\n');
  console.log('```php');
  console.log(`// Enqueue Tailwind CSS for admin pages`);
  console.log(`function ${pluginFolder}_admin_enqueue_styles() {`);
  console.log(`    wp_enqueue_style(`);
  console.log(`        '${pluginFolder}-admin-tailwind',`);
  console.log(`        plugin_dir_url(__FILE__) . 'assets/css/main.css',`);
  console.log(`        array(),`);
  console.log(`        '1.0.0'`);
  console.log(`    );`);
  console.log(`}`);
  console.log(`add_action('admin_enqueue_scripts', '${pluginFolder}_admin_enqueue_styles');`);
  console.log('```\n');
}

// Function to verify installation
function verifyInstallation(pluginFolder, themeFolder) {
  console.log('\nüîç Verifying installation...');
  
  const checks = [
    { name: 'Package.json exists', check: () => fs.existsSync('./package.json') },
    { name: 'Tailwind config exists', check: () => fs.existsSync('./tailwind.config.js') },
    { name: 'PostCSS config exists', check: () => fs.existsSync('./postcss.config.js') },
    { name: 'Input CSS exists', check: () => fs.existsSync('./src/input.css') },
    { name: 'Plugin directory exists', check: () => dirExists(`./wp-content/plugins/${pluginFolder}`) },
    { name: 'Theme directory exists', check: () => dirExists(`./wp-content/themes/${themeFolder}`) },
    { name: 'Plugin CSS directory exists', check: () => dirExists(`./wp-content/plugins/${pluginFolder}/assets/css`) },
    { name: 'Theme CSS directory exists', check: () => dirExists(`./wp-content/themes/${themeFolder}/assets/css`) },
    { name: 'Node modules exist', check: () => dirExists('./node_modules') }
  ];

  let allPassed = true;
  checks.forEach(check => {
    if (check.check()) {
      console.log(`‚úÖ ${check.name}`);
    } else {
      console.log(`‚ùå ${check.name}`);
      allPassed = false;
    }
  });

  return allPassed;
}

// Function to ask for user input with validation
function askQuestion(question, validator = null) {
  return new Promise((resolve) => {
    const ask = () => {
      rl.question(question, (answer) => {
        if (validator) {
          const error = validator(answer);
          if (error) {
            console.log(`‚ùå ${error}`);
            ask();
            return;
          }
        }
        resolve(answer.trim());
      });
    };
    ask();
  });
}

// Main setup function
async function setup() {
  try {
    console.log('Welcome to WordPress Tailwind CSS Setup!');
    console.log('This will set up Tailwind CSS for your WordPress theme and plugin.\n');

    // Check if we're in a WordPress root directory
    if (!fs.existsSync('./wp-content') || !fs.existsSync('./wp-config.php')) {
      console.log('‚ùå Error: This doesn\'t appear to be a WordPress root directory.');
      console.log('Please run this script from your WordPress root folder (where wp-config.php is located).');
      process.exit(1);
    }

    // Get plugin folder name with validation
    const pluginFolder = await askQuestion('Enter your plugin folder name: ', validateFolderName);
    
    // Get theme folder name with validation
    const themeFolder = await askQuestion('Enter your custom theme folder name: ', validateFolderName);
    
    console.log('\nüöÄ Setting up Tailwind CSS...\n');
    
    // Create necessary directories
    createDir(`./wp-content/plugins/${pluginFolder}`);
    createDir(`./wp-content/plugins/${pluginFolder}/assets`);
    createDir(`./wp-content/plugins/${pluginFolder}/assets/css`);
    createDir(`./wp-content/themes/${themeFolder}`);
    createDir(`./wp-content/themes/${themeFolder}/assets`);
    createDir(`./wp-content/themes/${themeFolder}/assets/css`);
    
    // Update package.json
    updatePackageJson(pluginFolder, themeFolder);
    
    // Create PostCSS config
    createPostCSSConfig();
    
    // Update .gitignore
    updateGitignore();
    
    // Install dependencies
    const installSuccess = installDependencies();
    if (!installSuccess) {
      console.log('\n‚ö†Ô∏è  Dependencies installation failed. You can run "npm install" manually later.');
    }
    
    // Create initial CSS files
    createInitialCSS(pluginFolder, themeFolder);
    
    // Create example files
    createExampleFiles(pluginFolder, themeFolder);
    
    // Display PHP code snippets for existing files
    displayPHPSnippets(pluginFolder, themeFolder);
    
    // Verify installation
    const verificationPassed = verifyInstallation(pluginFolder, themeFolder);
    
    console.log('\nüéâ Setup Complete!');
    console.log('==================\n');
    
    if (verificationPassed) {
      console.log('‚úÖ All checks passed! Your Tailwind CSS setup is ready.');
    } else {
      console.log('‚ö†Ô∏è  Some checks failed. Please review the errors above.');
    }
    
    console.log('\nüìã Next steps:');
    console.log('1. Run: npm run dev (to watch both theme and plugin)');
    console.log('2. Or run: npm run watch:plugin (plugin only)');
    console.log('3. Or run: npm run watch:theme (theme only)');
    console.log('\nüìÅ CSS will be generated to:');
    console.log(`   - Plugin: wp-content/plugins/${pluginFolder}/assets/css/main.css`);
    console.log(`   - Theme: wp-content/themes/${themeFolder}/assets/css/main.css`);
    console.log('\nüìö Documentation:');
    console.log('   - README.md - Complete documentation');
    console.log('   - QUICK_START.md - Quick reference guide');
    
  } catch (error) {
    console.error('‚ùå Setup failed:', error.message);
    process.exit(1);
  } finally {
    rl.close();
  }
}

setup();
